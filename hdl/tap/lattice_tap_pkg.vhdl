-- File generated by gensoc 394864f
-- (c) 2012-2018, Martin Strubel <hackfin@section5.ch>
-- 
-- Changes to this file will be lost. Edit the source file.
-- 
-- LICENSE: Evaluation license. Not for commercial usage.
----------------------------------------------------------------------------
-- This VHDL package is generated from
-- /home/strubi/src/jtag/uniemu/tap/tap_lattice.xml
-- Stylesheet: vhdlregs v0.1



library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

-- Header:
use work.periotypes.all;
package tap_jtag_lattice is
	-- HW revision tag. Use in your code to sync with firmware.
	constant HWREV_tap_jtag_lattice_MAJOR : natural := 0;
	constant HWREV_tap_jtag_lattice_MINOR : natural := 0;
	constant HWREV_tap_jtag_lattice_EXT   : string := "";

	subtype  regaddr_t is unsigned(7 downto 0);

	subtype  REG_SIZE1B is integer range 7 downto 0;
	subtype  REG_SIZE2B is integer range 15 downto 0;
	subtype  REG_SIZE3B is integer range 23 downto 0;
	subtype  REG_SIZE4B is integer range 31 downto 0;

	-- Register and bitfield constants:

-------------------------------------------------------------------------
-- Address segment 'Lattice_JTAG'
--         Offset: 

-- This is our 'IDCODE', but really the ECP3 USERCODE
	constant R_Lattice_JTAG_ECP3_TAP_IDCODE  : regaddr8_t := x"17";
-- This is our 'IDCODE', but really the MACHXO2 USERCODE
	constant R_Lattice_JTAG_FG_IDCODE        : regaddr8_t := x"c0";
-- User1: The EMUCTRL register (writeonly)
	constant R_Lattice_JTAG_TAP_EMUCTRL      : regaddr8_t := x"32";
-- Toggling this bit executes an opcode from EMUIR
	constant              B_EMUEXEC : natural := 7;
-- Select register to latch in EMUDATA
	subtype               BV_SELREG is integer range 6 downto 4;
-- 1: Request emulation mode, 0: Disable emulation
	constant              B_EMUREQ : natural := 0;
-- JTAG reset state
	constant              B_JTAG_RESET : natural := 14;
-- When set, do not debug inside emulation microcode
	constant              B_EMUMASK : natural := 11;
-- Reset the core logic. Use this to reset the CPU core
	constant              B_CORE_RESET : natural := 15;
-- USER1: Emustat register, readonly
	constant R_Lattice_JTAG_TAP_EMUSTAT      : regaddr8_t := x"32";
-- Acknowledge signal. High when emulation request acknowledged.
	constant              B_EMUACK : natural := 0;
-- 1 when emulation ready, 0 else.
	constant              B_EMURDY : natural := 1;
-- Reserved for specific core bits
	subtype               BV_CORE_SPEC is integer range 15 downto 8;
-- Emudata readonly channel from core to TAP
	constant R_Lattice_JTAG_TAP_EMUDATA      : regaddr8_t := x"38";
-- Instruction opcode sent to the core
	constant R_Lattice_JTAG_TAP_EMUIR        : regaddr8_t := x"38";

-------------------------------------------------------------------------
-- Address segment 'CONFIG'
--         Offset: 

-- This TAP is a native (vendor specific) JTAG port
	constant R_CONFIG_VENDOR_NATIVE_TA : regaddr8_t := x"00";

-------------------------------------------------------------------------
-- Address segment 'SELECT'
--         Offset: 

-- EMUDATA register
	constant R_SELECT_EMUDATA          : regaddr8_t := x"00";
-- Select PC
	constant R_SELECT_DBGPC            : regaddr8_t := x"01";
-- Select Emulation instruction register
	constant R_SELECT_EMUIR            : regaddr8_t := x"02";
-- Select event counter
	constant R_SELECT_COUNT            : regaddr8_t := x"04";
-- Select error counter
	constant R_SELECT_ERRCOUNT         : regaddr8_t := x"05";
-- Little LA
	constant R_SELECT_ANALYZER         : regaddr8_t := x"06";
-- TAP capability field
	constant R_SELECT_TAPCAPS          : regaddr8_t := x"07";
-- Tap revision major (0-15)
	subtype               BV_REV_MAJ is integer range 3 downto 0;
-- Tap revision minor (0-15)
	subtype               BV_REV_MIN is integer range 7 downto 4;
-- Flags corresponding to the selection field, denoting if function is supported ('1')
	subtype               BV_SELECT_MAP is integer range 15 downto 8;


	-- Access records:

	type tap_lattice_ReadPort is record
		--! Exported value for register 'R_Lattice_JTAG_ECP3_TAP_IDCODE'
		ecp3_tap_idcode : std_logic_vector(REG_SIZE4B);
		--! Exported value for register 'R_Lattice_JTAG_FG_IDCODE'
		fg_idcode : std_logic_vector(REG_SIZE4B);
		--! Exported value for register 'R_Lattice_JTAG_TAP_EMUSTAT'
		--! Exported value for bit (vector) 'EMUACK'
		emuack : std_logic;
		--! Exported value for bit (vector) 'EMURDY'
		emurdy : std_logic;
		--! Exported value for bit (vector) 'CORE_SPEC'
		core_spec : std_logic_vector(BV_CORE_SPEC);
		--! Exported value for register 'R_Lattice_JTAG_TAP_EMUDATA'
		tap_emudata : std_logic_vector(REG_SIZE4B);
	end record;

	type tap_lattice_WritePort is record
		--! Exported value for register 'R_Lattice_JTAG_TAP_EMUCTRL'
		--! Exported value for bit (vector) 'EMUEXEC'
		emuexec : std_logic;
		--! Exported value for bit (vector) 'SELREG'
		selreg : std_logic_vector(BV_SELREG);
		--! Exported value for bit (vector) 'EMUREQ'
		emureq : std_logic;
		--! Exported value for bit (vector) 'JTAG_RESET'
		jtag_reset : std_logic;
		--! Exported value for bit (vector) 'EMUMASK'
		emumask : std_logic;
		--! Exported value for bit (vector) 'CORE_RESET'
		core_reset : std_logic;
		--! Exported value for register 'R_Lattice_JTAG_TAP_EMUIR'
		tap_emuir : std_logic_vector(REG_SIZE4B);
	end record;

	type config_ReadPort is record
		--! Exported value for register 'R_CONFIG_VENDOR_NATIVE_TAP'
		vendor_native_tap : std_logic_vector(REG_SIZE1B);
	end record;

	type config_WritePort is record
		--! Exported value for register 'R_CONFIG_VENDOR_NATIVE_TAP'
		vendor_native_tap : std_logic_vector(REG_SIZE1B);
	end record;

	type dummy_select_ReadPort is record
		--! Exported value for register 'R_SELECT_EMUDATA'
		emudata : std_logic_vector(REG_SIZE3B);
		--! Exported value for register 'R_SELECT_DBGPC'
		dbgpc : std_logic_vector(REG_SIZE3B);
		--! Exported value for register 'R_SELECT_EMUIR'
		emuir : std_logic_vector(REG_SIZE3B);
		--! Exported value for register 'R_SELECT_COUNT'
		count : std_logic_vector(REG_SIZE3B);
		--! Exported value for register 'R_SELECT_ERRCOUNT'
		errcount : std_logic_vector(REG_SIZE3B);
		--! Exported value for register 'R_SELECT_ANALYZER'
		analyzer : std_logic_vector(REG_SIZE3B);
		--! Exported value for register 'R_SELECT_TAPCAPS'
		--! Exported value for bit (vector) 'REV_MAJ'
		rev_maj : std_logic_vector(BV_REV_MAJ);
		--! Exported value for bit (vector) 'REV_MIN'
		rev_min : std_logic_vector(BV_REV_MIN);
		--! Exported value for bit (vector) 'SELECT_MAP'
		select_map : std_logic_vector(BV_SELECT_MAP);
	end record;

	type dummy_select_WritePort is record
		--! Exported value for register 'R_SELECT_EMUDATA'
		emudata : std_logic_vector(REG_SIZE3B);
		--! Exported value for register 'R_SELECT_DBGPC'
		dbgpc : std_logic_vector(REG_SIZE3B);
		--! Exported value for register 'R_SELECT_EMUIR'
		emuir : std_logic_vector(REG_SIZE3B);
		--! Exported value for register 'R_SELECT_COUNT'
		count : std_logic_vector(REG_SIZE3B);
		--! Exported value for register 'R_SELECT_ERRCOUNT'
		errcount : std_logic_vector(REG_SIZE3B);
		--! Exported value for register 'R_SELECT_ANALYZER'
		analyzer : std_logic_vector(REG_SIZE3B);
		--! Exported value for register 'R_SELECT_TAPCAPS'
		--! Exported value for bit (vector) 'REV_MAJ'
		rev_maj : std_logic_vector(BV_REV_MAJ);
		--! Exported value for bit (vector) 'REV_MIN'
		rev_min : std_logic_vector(BV_REV_MIN);
		--! Exported value for bit (vector) 'SELECT_MAP'
		select_map : std_logic_vector(BV_SELECT_MAP);
	end record;

	-- Register maps that explicitely have hidden="false"


end tap_jtag_lattice;

