-- ZPU SoC system
-- (c) 2011-2015 Martin Strubel <hackfin@section5.ch>

-- ONLY modify this file when it has a .chdl extension!

-- Autoconf header
#include "../../include/generated/autoconf.h"
// #include CONFIG_SOCDESC

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

#ifdef CONFIG_ZEALOT
library zpu;
	use zpu.zpupkg.all;
#endif
library work;
	use work.busdef.all;
	use work.system_map.all;
	use work.global_config.all;
#ifdef CONFIG_ZEALOT
	use work.zpu_small.all;
#endif

#if defined (CONFIG_netpp_node) && !defined(CONFIG_DUMMYTAP)
	use work.tap_std.all;
#endif

#ifdef CONFIG_ZPUNG
	use work.zputap.all;
#endif

#ifdef CONFIG_VIRTUAL_RAM
library ghdlex;
	use ghdlex.virtual.all;
#endif

-- RAM declaration
library work;
	use work.ram.all; -- For DPRAM32_init
	use work.memory_initialization.all; -- BOOTROM_INIT
	use work.stdtap.all; -- Our wrapped TAP

-- use work.zpu_memory.all;

#include "../core/common/soc_ports.chdl"

architecture behaviour of SoC is

#include "../core/common/soc_signals.chdl"


#ifdef CONFIG_ZEALOT
	signal break         : std_logic;
#endif

	signal exec_count    : unsigned(15 downto 0) := x"0000";

	constant ADDR_NULL   : ramaddr32_t := (others => '0');

	-- Program+data+stack BRAM
	-- Port A
	signal a_we     : std_logic := '0';
	signal a_addr   : ramaddr32_t;
	signal a_write  : unsigned(WORD_SIZE-1 downto 0);
	signal a_read   : unsigned(WORD_SIZE-1 downto 0);
	-- Port B
	signal b_we     : std_logic;
	signal b_addr   : ramaddr32_t;
	signal b_write  : unsigned(WORD_SIZE-1 downto 0);
	signal b_read   : unsigned(WORD_SIZE-1 downto 0);

	-- I/O space
	signal io_busy  : std_logic := '0';
	-- signal busy_en  : std_logic := '1';
	-- signal busy_clr    : std_logic := '0';
	signal io_write_wb : unsigned(WORD_SIZE-1 downto 0);
	signal io_read_wb  : unsigned(WORD_SIZE-1 downto 0);
	signal io_read  : unsigned(WORD_SIZE-1 downto 0);
#ifdef CONFIG_ZPUNG

	signal daddr_phys  : ramaddr32_t;
	signal iaddr_phys  : ramaddr32_t;
	signal insn_addr32 : unsigned(CONFIG_ADDR_WIDTH-1 downto BYTE_BITS);
#ifdef CONFIG_SCACHE
	signal imem_daddr  : vramaddr32_t;
	signal imem_iaddr  : vramaddr32_t;
#else
	signal imem_daddr   : ramaddr32_t;
	signal imem_iaddr   : ramaddr32_t;
#endif
	signal io_addr32 : unsigned(CONFIG_ADDR_WIDTH-1 downto BYTE_BITS); -- 32 bit, without 2 LSB
#else
	signal io_addr : unsigned(CONFIG_ADDR_WIDTH-1 downto 0);
#endif

	-- I/O memory address, 8 bit
	signal addr_iomem : unsigned(32-1 downto 0);

	signal io_we    : std_logic;
	signal io_re    : std_logic;

	signal perio_ce : std_logic;
	signal irq      : std_logic;

	signal cache_wait  : std_logic := '0';

#ifdef CONFIG_SCACHE
	signal perio_ce_d : std_logic;
#endif


#ifdef CONFIG_ZEALOT
	signal dbg: zpu_dbgo_t;
#endif

	-- Wishbone interfacing:

	signal wb_perio_wr    : wb_WritePort;
	signal wb_perio_rd    : wb_ReadPort;

	-- Debugging
#ifdef CONFIG_ZEALOT
	signal dbgcount     : unsigned(16-1 downto 0);
	signal dbgstat      : std_logic_vector(7 downto 0) := (others => '0');
#endif

begin

#ifdef CONFIG_VIRTUAL_RAM

vram: VirtualDualPortRAM
	generic map (
		NETPP_NAME => "VRAM",
		ADDR_W => CONFIG_BRAM_ADDR_WIDTH-2,
		DATA_W => 32,
		INIT_DATA => vram32_init_t(BOOTROM_INIT)
	)
	port map (
		clk       => clk,
		a_we      => a_we,
		a_addr    => a_addr,
		a_write   => a_write,
		a_read    => a_read,
		b_we      => b_we,
		b_addr    => b_addr,
		b_write   => b_write,
		b_read    => b_read
	);


#else

rom: DPRAM32_init
	generic map (
		ADDR_W => CONFIG_BRAM_ADDR_WIDTH-2, -- 32 bit wide, LSB 0 aligned
		DATA_W => 32,
		INIT_DATA => ram32_init_t(BOOTROM_INIT)
	)
	port map (
		clk       => clk,
		a_we      => a_we,
		a_addr    => a_addr,
		a_write   => a_write,
		a_read    => a_read,
		--
		b_we      => b_we,
		b_addr    => b_addr,
		b_write   => b_write,
		b_read    => b_read
	);

#endif

#ifdef CONFIG_WISHBONE

	------------------------------------------------
	-- Wishbone bridge:

bus_bridge:
	entity work.wb2zpu
	port map (
		clk         => clk,
		addr        => addr_iomem,
		we          => io_we,
		re          => io_re,
		din         => io_write_wb,
		dout        => io_read_wb,
		wb_in       => wb_perio_rd,
		wb_out      => wb_perio_wr,
		reset       => reset
	);


#ifdef CONFIG_ZPUNG
		-- 32 bit addr:
		addr_iomem <= resize(io_addr32 & "00", 32);
#else
		addr_iomem <= resize(io_addr, 32);
#endif


#ifdef CONFIG_ZPUNG
	-- Currently requires CONFIG_GENSOC_READ_DELAY=y
	-- FIXME: Also allow zero delay
busy_check:	
	process (clk)
	begin
 		if rising_edge(clk) then
			-- Only flag busy when we're accessing peripheral I/O.
			if io_re = '1' and perio_ce = '1' then
				io_busy <= '1';
			elsif io_busy = '1' then
				if wb_perio_rd.ack = '1' then
					io_busy <= '0';
				end if;
			end if;
		end if;
	end process;
#else
	io_busy <= not wb_perio_rd.ack;
#endif

-- IRQ mapping 
-- FIXME: Use HAVE-defines in vendor/<vendor>/config.mk
#if defined(HAVE_UARTIRQ)
#	ifdef CONFIG_UART
	irq_input(B_PINMAP_IRQ_UART0) <= uart_rxirq;
#	endif
	-- Only timer 0-2 can interrupt:
#	if CONFIG_NUM_TMR > 2
	irq_input(BV_PINMAP_IRQ_TIMER) <=
		unsigned(pwm_irq(CONFIG_NUM_TMR-1 downto CONFIG_NUM_TMR-3));
#	endif
--------------------------------------------------------------
#elif defined(CONFIG_xo3starter)

#elif defined(CONFIG_netpp_node)

	irq_input(B_PINMAP_IRQ_TIMER0) <= pwm_irq(0);
	irq_input(B_PINMAP_IRQ_IO) <= gpio_irq;
	irq_input(BV_PINMAP_IRQ_DMA) <= dma_irq;

--------------------------------------------------------------
#elif defined(CONFIG_papilio) || defined(CONFIG_zpung) \
	|| defined(CONFIG_versa_ecp5) \
	|| defined(CONFIG_hdr60) || defined(CONFIG_virtual)
#	ifdef CONFIG_TIMER
		irq_input(B_PINMAP_IRQ_TIMER0) <= pwm_irq(0);
#		ifdef CONFIG_JPEG
			irq_input(B_PINMAP_IRQ_JPEG) <= jpeg_irq;
#		else
			irq_input(B_PINMAP_IRQ_TIMER1) <= pwm_irq(1);
#		endif

#	else // ! TIMER
#		ifdef CONFIG_JPEG
			irq_input(B_PINMAP_IRQ_JPEG) <= jpeg_irq;
#		endif

#	endif


#	ifdef CONFIG_DMA
	irq_input(BV_PINMAP_IRQ_DMA) <= dma_irq;
#	endif

#	ifdef CONFIG_ZPUNG
	-- Fire exception when trying to access lower program memory:
	xs_ucode <= b_we
		when imem_daddr(imem_daddr'high downto 10) = "000000" else '0';
#	endif

	-- xs_unaligned <= b_we when imem_daddr(1 downto 0) /= "00" else '0';

#endif

--------------------------------------------------------------

#ifdef CONFIG_SCACHE
	nmi <= scache_irq or sysio_exc;
	exc <= scache_irq; -- Make it a high prio exception
#else
	nmi <= sysio_exc;
	exc <= nmi;
#endif

#include "../core/common/perio.chdl"

#ifndef HAVE_UART_IOMUX_SEL
		uart_iosel <= '0';
#endif

#ifdef CONFIG_ZPUNG
#ifdef CONFIG_SCACHE
	insn_addr32 <= resize(imem_iaddr, CONFIG_ADDR_WIDTH - 2);

	a_addr <= iaddr_phys when scache_sel(0) = '1'
		else imem_iaddr(ramaddr32_t'range);
	b_addr <= daddr_phys when scache_sel(1) = '1'
		else imem_daddr(ramaddr32_t'range);

#ifdef CONFIG_papilio
	-- Legacy hack, FIXME
	perio_ce <= io_addr32(IO_BIT) and io_addr32(IO_BIT-1);
#else
	perio_ce <= io_addr32(IO_BIT);
#endif
	process (clk)
	begin
		if rising_edge(clk) and io_busy = '0' then
			-- If we access MMR range, but not the perio range, latch
			-- memory data, when we are not busy
			perio_ce_d <= perio_ce;
		end if;
	end process;
	io_read <= b_read when perio_ce_d = '0' else io_read_wb;
#else
	io_read <= io_read_wb;
	perio_ce <= io_addr32(IO_BIT);
	-- If no cache, connect physical addresses:
	a_addr <= imem_iaddr;
	b_addr <= imem_daddr;
#endif
#else
	io_read <= io_read_wb;
	perio_ce <= io_addr(IO_BIT);
#endif

#ifdef CONFIG_MAC
#include "../core/common/mac.chdl"
#endif


#endif // CONFIG_WISHBONE

#include "../core/common/soc_body.chdl"

-- When SIC not configured, wire IRQ to nmi
#ifdef CONFIG_SIC
	irq <= irq_evt;
#else
	-- Bypass not-existing SIC
	irq_override <= '0';
	irq <= nmi;
	-- Wire to fixed vector 0x20
	ivaddr <= to_unsigned(32, ivaddr'length);
#endif

----------------------------------------------------------------------------
-- Exec pulse clock domain transfer:

exec_pulse:
	entity work.flagxdp
	port map (
		reset => tap_reset,
		clki => tin.tapclk,
		datai => tin.emuexec,
		clko => clk,
		datao => strobe
	);

#ifdef CONFIG_DEBUG_COUNT_EXEC
count_exec_pulses:
	process (clk)
	begin
		if rising_edge(clk) then
			if reset = '1' then
				exec_count <= (others => '0');
			elsif strobe = '1' then
				exec_count <= exec_count + 1;
			end if;
		end if;
	end process;
#endif

#if defined(CONFIG_versa_ecp5) 
	led_cpustat <=
	                dbg_exstat(B_ZPU_INRESET - 8) &
	                dbg_exstat(B_ZPU_MEMBUSY - 8) &
	                dbg_exstat(B_ZPU_EXCEPT - 8) &
	                dbg_exstat(B_ZPU_BREAK - 8) &
	                "0" &
	                dbg_exstat(B_ZPU_IN_UCODE - 8) &
	                dbg_exstat(B_ZPU_IRQLAT - 8) &
	                dbg_exstat(B_ZPU_IRQACK - 8);

#elif defined(CONFIG_netpp_node)
/* LED order on v0.1: BLUE YELLOW GREEN RED  (Adapted to population mistake)
 *              v0.0: YELLOW BLUE GREEN  RED
 *                     [D4]  [D3]  [D2]  [D1]
 */

	led_cpustat <=  "XXXX" &
	                dbg_exstat(B_ZPU_IRQACK - 8) &
	                emurdy &
	                dbg_exstat(B_ZPU_BREAK - 8) &
	                dbg_exstat(B_ZPU_INRESET - 8);

#endif



#ifdef CONFIG_ZPUNG
zpucore: entity work.ZPUng
	port map (
		clk           => clk,
		reset         => reset,
		irq           => irq,
		override      => irq_override,
		exc           => exc,
		cache_wait    => cache_wait,
		evaddr        => ivaddr,
		imem_write	  => b_we,
		imem_idata	  => a_read,
		imem_read     => open,
		imem_daddr    => imem_daddr,
		imem_wdata    => b_write,
		imem_rdata    => b_read,
		imem_iaddr    => imem_iaddr,
		mmr_we        => io_we,
		mmr_addr      => io_addr32,
		mmr_re        => io_re,
		mmr_wdata     => io_write_wb,
		mmr_rdata     => io_read,
		mmr_busy      => io_busy,
		tap_reset     => tap_reset,
		tap_curpc     => dbg_curpc,
		tap_exstat    => dbg_exstat,
		tap_idata     => x"00000000",
		tap_emuexec   => strobe,
		tap_odata     => dbg_emudata_o,
		tap_emuir     => unsigned(tin.emuir(7 downto 0)),
		tap_emuack    => emuack,
		tap_emurdy    => emurdy,
		tap_emumask   => tin.emumask,
		tap_emureq    => tin.emurequest
	);

	tout.emuack <= emuack;
	tout.emurdy <= emurdy;
	tout.emudata <= dbg_emudata_o;
	tout.dbgpc <= dbg_curpc;
	tout.count <= x"0000" & exec_count;
	tout.exstat <= dbg_exstat;
#endif

#ifdef CONFIG_ZEALOT
zpucore : ZPUSmallCore
	generic map (
		WORD_SIZE => WORD_SIZE,
		ADDR_W => CONFIG_ADDR_WIDTH,
		MEM_W => CONFIG_BRAM_ADDR_WIDTH,
		D_CARE_VAL => '0')
	port map (
		clk_i     => clk, reset_i => reset, interrupt_i => irq,
		emureq_i  => tin.emurequest,
		emuexec_i => strobe,
		emuack_o  => emuack,
		emurdy_o  => emurdy,
		emuir     => std_logic_vector(tin.emuir(7 downto 0)),
		break_o   => break, dbg_o => dbg,

		-- BRAM (text, data, bss and stack)
		a_we_o => a_we, a_addr_o => a_addr, a_o => a_write, a_i => a_read,
		b_we_o => b_we, b_addr_o => b_addr, b_o => b_write, b_i => b_read,
		-- Memory mapped I/O
		mem_busy_i => io_busy, data_i => io_read, data_o => io_write_wb,
		addr_o => io_addr, write_en_o => io_we, read_en_o => io_re
	);

	tout.emudata <= dbg.stk_a;
	tout.dbgpc <= dbg.pc;
	tout.count <= x"0000" & dbgcount;
	dbgstat(B_ZPU_IDIM - 8)    <= dbg.idim;
	dbgstat(B_ZPU_MEMBUSY - 8) <= '0';
	dbgstat(B_ZPU_BREAK - 8)   <= break;
	dbgstat(B_ZPU_INRESET - 8) <= reset;

	tout.exstat <= unsigned(dbgstat);

#ifdef CONFIG_SIM_BREAK
break_term:
	process (clk)
	begin
		if rising_edge(clk) then
			if break = '1' and tin.emurequest = '0' then
				assert false report "Break issued, terminating simulation" 
					severity failure;
			end if;
		end if;
	end process;
#endif



#endif // CONFIG_ZEALOT

end architecture behaviour;
