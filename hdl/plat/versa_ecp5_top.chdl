--
-- Versa ECP5(G) top level module
--
--
-- 1/2017  Martin Strubel <hackfin@section5.ch>
--
-- Changes to this file WILL BE VOID if it has a .vhdl extension!
-- Edit the corresponding .chdl file instead.

#include "../../include/generated/autoconf.h"
// Hack to not substitute this one as it will not be understood:
#undef CONFIG_TAPCLK_PERIOD

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

-- For some ECP5 specific entities:
#define USE_SOC

-- FIXME: We should make a legal clone of the components file
library work;
	use work.bb_components.all;
#ifndef SYNTHESIS_GHDL
library ECP5UM;
	use ECP5UM.components.all;
#endif

library work;
	use work.stdtap.all;
	use work.global_config.all;
	use work.system_map.all;

entity versa_ecp5_top is
	generic ( SIMULATION : boolean := false );
	port (
#ifndef SYNTHESIS_GHDL
		tck         : in  std_logic;
		tms         : in  std_logic;
		tdi         : in  std_logic;
		tdo         : out std_logic;
#endif
		-- clk_out     : out  std_logic;

		spi_miso  : in  std_logic;
		spi_mosi  : out std_logic;
		spi_cs    : out std_logic;

		twi_scl  : inout std_logic;
		twi_sda  : inout std_logic;

		rxd_uart    : in std_logic;	  -- FT2232 -> CPU
		txd_uart    : out std_logic;  -- CPU    -> FT2232

		oled         : out  std_logic_vector(7 downto 0);
		seg          : out  std_logic_vector(13 downto 0);
		segdp        : out  std_logic;
		dip_sw       : in   std_logic_vector(7 downto 0);

		-- MAC I/O
--		phy_rgmii_txclk      : out std_logic;
--		phy_rgmii_txctl      : out std_logic;
--		phy_rgmii_txd        : out std_logic_vector(3 downto 0);
--		phy_rgmii_rxclk      : in std_logic;
--		phy_rgmii_rxctl      : in std_logic;
--		phy_rgmii_rxd        : in std_logic_vector(3 downto 0);
--		ts_mac_coremdc       : out std_logic;
--		ts_mac_coremdio      : inout std_logic;
		-- eth_rst_n            : out std_logic;
		hw_config            : out std_logic;

		reset_n      : in   std_logic;
		-- clk_serdes   : in   std_logic;
		clk_in       : in   std_ulogic

	);
end entity versa_ecp5_top;


architecture behaviour of versa_ecp5_top is

	signal mclk           : std_logic;
	signal mclk_locked    : std_logic;

	-- Pixel clock:
	signal pclk           : std_logic;

	signal comb_reset     : std_logic;
	signal delayed_reset  : std_logic;
	signal reset_delay    : unsigned(3 downto 0);

	constant CLK_FREQUENCY : integer := 12500000;

	signal tap2core       : tap_out_rec := (
		tapclk => '0',
		jtag_reset => '0',
		core_reset => '0',
		emuexec => '0',
		emumask => '0',
		emurequest => '0',
		emudata => (others => '0'),
		emuir => (others => '0'),
		reg => (others => '0'),
		craddr => (others => '0')
	);
	signal core2tap       : tap_in_rec;

	signal uart_iosel     : std_logic;
	-- signal spi_sclk       : std_logic;
	-- signal spi_sclk_en    : std_logic;
#ifndef SYNTHESIS_GHDL
	signal spi_ts         : std_logic;
#endif
#ifdef CONFIG_SPI
	signal spi_cs_int     : std_logic;
#endif
	-- signal spi_gatedclk   : std_logic;

	-- signal sys_ctrl   : sys_WritePort;
	-- signal sys_stat   : sys_ReadPort;

	-- signal irq_in         : std_logic := '0';

	-- signal phy_reset      : std_logic;
	signal cpu_reset      : std_logic;
	signal tap_reset      : std_logic;
    -- signal counter : integer range 0 to CLK_FREQUENCY;

	-- GPIOs:
	-- Set to defined state for simulation:
#ifdef CONFIG_GPIO
	signal gpio           : unsigned(CONFIG_NUM_GPIO*16-1 downto 0) :=
		(others => '0');
#else
	signal gpio           : unsigned(32-1 downto 0) :=
		(others => '0');
#endif
	signal cfg            : std_logic_vector(7 downto 0);

	signal led            : unsigned(7 downto 0) := (others => '0');

	-- MAC clocks:

#ifdef SYNTHESIS_GHDL
		signal tck         : std_logic := '0';
		signal tms         : std_logic := '0';
		signal tdi         : std_logic := '0';
		signal tdo         : std_logic := '0';
#endif

begin

	comb_reset <= (not reset_n) or (not mclk_locked);
	hw_config <= '0';

	seg <= not std_logic_vector(gpio(13 downto 0));
	segdp <= not gpio(14);

	-- clk_out <= mclk;

	-- gsr_inst: GSR port map (reset_n);

-- We run a delayed reset for the CPU, as there might be race conditions
-- with the TAP.

delayed_cpu_reset:
	process (comb_reset, mclk)
	begin
		if comb_reset = '1' then
			reset_delay	<= x"f";
			delayed_reset <= '1';
		elsif rising_edge(mclk) then
			if reset_delay /= x"0" then
				reset_delay <= reset_delay - 1;
			else
				delayed_reset <= '0';
			end if;
		end if;
	end process;


-- Note: Slow in simulation, when CONFIG_EMULATE_PLATFORM_IP not defined
clk_pll1: pll_mac
    port map (
        CLKI    =>  clk_in,
        CLKOP   =>  open,
        CLKOS   =>  mclk, -- 25 Mhz
        CLKOS2  =>  open,
        CLKOS3  =>  pclk,
        LOCK    =>  mclk_locked
	);

-- clk_video: entity work.rtp_pll
--     port map (
--         CLKI    =>  clk_serdes,
--         CLKOP   =>  pclk
-- 	);


----------------------------------------------------------------------------
-- SoC CPU

#ifndef CONFIG_NEO430


maybe_hwtap:
if not SIMULATION generate

hwtap: entity work.ECP5_TAP
	port map (
		reset       => '0', -- startup reset
		tck         => tck,
		tms         => tms,
		tdi         => tdi,
		tdo         => tdo,
		-- Core <-> TAP signals:
		tin         => core2tap,
		tout        => tap2core
	);

end generate;

-- synthesis translate_off

maybe_swtap:
if SIMULATION generate
	swtap: VirtualTAP_DIRECT
	generic map ( IDCODE => CONFIG_TAP_ID,
		INS_NOP => x"0000000b",
		TCLK_PERIOD => CONFIG_TAPCLK_PERIOD )
	port map (
		-- Core <-> TAP signals:
		tin         => core2tap,
		tout        => tap2core
	);
end generate;

-- synthesis translate_on

#else
	tdo <= '1';
	tap2core.core_reset <= '0';
#endif

	cpu_reset <= tap2core.core_reset or delayed_reset;
	tap_reset <= comb_reset;


soc: entity work.SoC
	port map (
		clk            => mclk,
		nmi_i          => '0',
#ifndef CONFIG_NEO430
		tap_reset      => tap_reset,
		perio_rst      => '0',
		pclk           => pclk,

		tin            => tap2core,
		tout           => core2tap,
		irq0           => '0',
		video_resetn   => open,
		led_status     => led,
#endif

		-- Emulation pins:

#ifdef CONFIG_GPIO
		gpio           => gpio,
#endif
		-- pwm       => pwm(CONFIG_NUM_TMR-1 downto 0),

#ifdef CONFIG_SPI
		spi_cs         => spi_cs_int,
		spi_mosi       => spi_mosi,
		spi_miso       => spi_miso,
#endif
#ifdef CONFIG_TWI
		twi_sda        => twi_sda,
		twi_scl        => twi_scl,
#endif


		uart_tx => txd_uart,
		uart_rx => rxd_uart,
#ifdef HAVE_EXTENDED_SYSIO
		uart_iosel     => uart_iosel,
		sysconfig      => cfg,
#endif

		reset          => cpu_reset
	);


#ifdef CONFIG_SPI
#ifdef SYNTHESIS_GHDL
	spi_cs <= '1';
#else
	spi_cs <= spi_cs_int;
	spi_ts <= spi_cs_int; -- Use CS for tristate
-- User SPI access via USRMCLK ECP5 primitive:
	-- usrmclk_inst: USRMCLK
	-- 	port map (usrmclki => spi_sclk, usrmclkts => spi_ts);
#endif
#else
	spi_mosi  <= 'H';
	spi_cs    <= 'H';
#endif

#ifndef CONFIG_TWI
	twi_sda   <= 'H';
	twi_scl   <= 'H';
#endif

	-- Use master clock for pixel clock
	-- pclk <= mclk;

	cfg <= not dip_sw;
	-- eth_rst_n <= not phy_reset;

	-- Note LED are low active
	oled <= not std_logic_vector(led);

	-- oled <= not std_logic_vector(core2tap.exstat);

	-- txd_uart   <= rxd_uart;
	

end behaviour;
