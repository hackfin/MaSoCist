-- File: flagxdp.vhd
-- Generated by MyHDL 0.11
-- Date: Mon Feb 17 13:00:32 2020


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_011.all;

entity flagxdp is
    port (
        reset: in std_logic;
        clki: in std_logic;
        datai: in std_logic;
        clko: in std_logic;
        datao: out std_logic
    );
end entity flagxdp;
-- Version with pulse derival (rising)

architecture MyHDL of flagxdp is





signal isig_d: std_logic;
signal sig: std_logic;
signal flagx0_0_toggle: std_logic;
signal flagx0_0_syncpipe: unsigned(2 downto 0);

begin




FLAGXDP_FLAGX0_0_OUT_WORKER: process (clko) is
begin
    if rising_edge(clko) then
        flagx0_0_syncpipe <= unsigned'(flagx0_0_syncpipe(2-1 downto 0) & flagx0_0_toggle);
    end if;
end process FLAGXDP_FLAGX0_0_OUT_WORKER;

FLAGXDP_FLAGX0_0_IN_WORKER: process (clki) is
begin
    if rising_edge(clki) then
        if (reset = '1') then
            flagx0_0_toggle <= '0';
        else
            flagx0_0_toggle <= (flagx0_0_toggle xor sig);
        end if;
    end if;
end process FLAGXDP_FLAGX0_0_IN_WORKER;


datao <= (flagx0_0_syncpipe(1) xor flagx0_0_syncpipe(2));

FLAGXDP_IN_WORKER: process (clki) is
begin
    if rising_edge(clki) then
        if (reset = '1') then
            isig_d <= '0';
        else
            isig_d <= datai;
        end if;
    end if;
end process FLAGXDP_IN_WORKER;


sig <= (datai and (not isig_d));

end architecture MyHDL;
